[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;	// Set the MOD FLAG, indicates whether the current process is executing is a system call, exception handler or user mode
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;	// Save the value of SP in the userSP (UPTR) field of Process Table entry of process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;	// Set the value of SP to beggining of the kernel stack
alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];			// page translation
offset = (userSP - 4) % 512;								// (userSP-4) has file Descriptor
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];
if (fileDescriptor != -2)
	then									// store -1 as return value
		alias physicalAddrRetVal R5;
		physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = -1;
	else
		alias word R5;
		word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
		print word;
		alias physicalAddrRetVal R6;
		physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
		[physicalAddrRetVal] = 0;
endif;
SP = userSP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;	// MOD is user now
ireturn;
