// load timer interrupt 
loadi(4,17);			
loadi(5,18);

// load INT7 (for printing) 
loadi(16,29);			
loadi(17,30);

// load library 
loadi(63,13);			
loadi(64,14);

// load INIT code
loadi(65,7);			
loadi(66,8);

// load INT10 (debugging) module
loadi(22,35);			
loadi(23,36);

// load exception handler
loadi(2,15);			
loadi(3,16);


// INIT

PTBR = PAGE_TABLE_BASE + 20;		
PTLR = 10;

// LIBRARY 
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

// HEAP
[PTBR+4]=78;					
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

// CODE
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

// STACK
[PTBR+16]=76;					
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

[PROCESS_TABLE + 17]=1;				// PID for user process
[PROCESS_TABLE + 20]=CREATED;		// STATE for user process
[PROCESS_TABLE + 27]=80;			// UAPN for user process
[PROCESS_TABLE + 29]=8*512;			// UPTR
[PROCESS_TABLE + 28]=0;							// KPTR
[PROCESS_TABLE + 30]=PAGE_TABLE_BASE + 20;		// PTBR
[PROCESS_TABLE + 31]=10;						// PTLR
[76*512] = [65*512 + 1];

SP=8*512;				// Starting address of stack
ireturn;
