// THIS IS DEVICE MANAGER

alias functionNum R1;
alias currentPID R2;
if(functionNum==3)			// for terminal Write
	then			// Do Acquire Terminal, print, Release Terminal
		multipush(R1,R2);			// R1 and R2 used in this module
		R1 = 8;				// function number for acquire terminal
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;				// Resource Manager
		multipop(R1,R2);
		print R3;				
		multipush(R1,R2);
		R1 = 9;					// Release Terminal
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;
		multipop(R1,R2);
		return;
endif;
if(functionNum==4)			// for terminal read
	then
		multipush(R1,R2,R3);
		R1 = 8;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call MOD_0;			// Resource Manager for acquire terminal
		multipop(R1,R2,R3);
		read;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_TERMINAL;
		multipush(R1,R2,R3);
		call MOD_5;				// scheduler
		multipop(R1,R2,R3);
		R3 = [PTBR + 2 * (R3 / 512)] * 512 + (R3 % 512);	// Logical Address
		[R3] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 8];
		return;
endif;

if(functionNum==2)			// for disk load
	then
		multipush(R1,R2,R3,R4);		// R3 has pageNum and R4 has blockNum as input
		R1 = 3;			// acquire disk
		call MOD_0;		// resource manager
		multipop(R1,R2,R3,R4);
		
		// we do not need to set state of disk, this is already been done in resource manager
		[DISK_STATUS_TABLE + 1]=0;		// operation being done is load
		[DISK_STATUS_TABLE + 2]=R3;		// pageNum
		[DISK_STATUS_TABLE + 3]=R4;		// blockNum
		// also no need to set pid, this is also done in resource manager
		
		load(R3,R4);
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_DISK;
		multipush(R1,R2,R3,R4);
		call MOD_5;				// scheduler
		multipop(R1,R2,R3,R4);
		return; 
endif;
return;
