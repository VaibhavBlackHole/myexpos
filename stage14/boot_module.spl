// load timer interrupt 
loadi(4,17);			
loadi(5,18);

// load INT7 (for printing) 
loadi(16,29);			
loadi(17,30);

// load library 
loadi(63,13);			
loadi(64,14);

// load INIT code, ODD NUMBERS
loadi(65,7);			
loadi(66,8);

loadi(84,69);						// MEMORY PAGE FROM DISK
// there is no code in page 70 of disk

// load INT10 (debugging) module
loadi(22,35);			
loadi(23,36);

// load exception handler
loadi(2,15);			
loadi(3,16);

// load context switch (scheduler)
loadi(50,63);
loadi(51,64);


// INIT, ODDS

PTBR = PAGE_TABLE_BASE + 20;		
PTLR = 10;

// LIBRARY 
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

// HEAP
[PTBR+4]=78;					
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

// CODE
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

// STACK
[PTBR+16]=76;					
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

[PROCESS_TABLE + 17]=1;				// PID for user process
[PROCESS_TABLE + 20]=CREATED;		// STATE for user process
[PROCESS_TABLE + 27]=80;			// UAPN for user process, LOGICAL
[PROCESS_TABLE + 29]=8*512;			// UPTR
[PROCESS_TABLE + 28]=0;							// KPTR
[PROCESS_TABLE + 30]=PAGE_TABLE_BASE + 20;		// PTBR
[PROCESS_TABLE + 31]=10;						// PTLR
[76*512] = [65*512 + 1];





// EVEN PROGRAM

PTBR = PAGE_TABLE_BASE + 40;
PTLR = 10;

// LIBRARY
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

// HEAP
[PTBR+4]=88;					
[PTBR+5]="0110";
[PTBR+6]=89;
[PTBR+7]="0110";

// CODE
[PTBR+8]=84;
[PTBR+9]="0100";
[PTBR+10]=-1;
[PTBR+11]="0000";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

// STACK
[PTBR+16]=86;					
[PTBR+17]="0110";
[PTBR+18]=87;
[PTBR+19]="0110";

[PROCESS_TABLE + 1 + 32]=2;				// PID for user process
[PROCESS_TABLE + 4 + 32]=CREATED;		// STATE for user process
[PROCESS_TABLE + 11 + 32]=90;			// UAPN for user process, LOGICAL
[PROCESS_TABLE + 13 + 32]=8*512;			// UPTR
[PROCESS_TABLE + 12 + 32]=0;							// KPTR
[PROCESS_TABLE + 14 + 32]=PAGE_TABLE_BASE + 40;		// PTBR
[PROCESS_TABLE + 15 + 32]=10;						// PTLR
[86*512] = [84*512 + 1];

alias i R0;
i = 3;
while(i<16)					// max number of process are 16 in EXPOS
	do
		[PROCESS_TABLE + 4 + 16*i] = TERMINATED;
		i = i+1;
endwhile;
return;				// return is used not ireturn
