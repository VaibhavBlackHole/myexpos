loadi(4,17);			// load timer interrupt from disk 17 and 18
loadi(5,18);
loadi(16,29);			// load INT7 (for printing) from the disk
loadi(17,30);
loadi(63,13);			// load library from the disk to memory
loadi(64,14);
loadi(65,7);			// load INIT code
loadi(66,8);
loadi(22,35);			// load INT10 (debugging) module
loadi(23,36);
loadi(2,15);			// load exception handler
loadi(3,16);
loadi(69,11);			// idle code is stored in memory
loadi(70,12);
PTBR = PAGE_TABLE_BASE;				// as PID of idle process is 0
PTLR = 10;
[PTBR+0]=-1;			// Library;
[PTBR+1]="0000";
[PTBR+2]=-1;			// idle process do not use library
[PTBR+3]="0000";
[PTBR+4]=-1;			// Heap
[PTBR+5]="0000";
[PTBR+6]=-1;			// idle process do not use heap 
[PTBR+7]="0000";
[PTBR+8]=69;			// Code, 69 as idle is in this memory
[PTBR+9]="0100";		// 65 for init process
[PTBR+10]=70;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";
[PTBR+16]=81;			// Stack, 81 for idle, 76 for init process
[PTBR+17]="0110";
[PTBR+18]=-1;
[PTBR+19]="0000";
PTBR = PAGE_TABLE_BASE + 20;		// for init process
PTLR = 10;
[PTBR+0]=63;					// INIT Library
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";
[PTBR+4]=78;					// HEAP
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";
[PTBR+8]=65;					// CODE
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";
[PTBR+16]=76;					// Stack, 81 for idle
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";
[81*512]=[69*512+1];		// stores address of first instruction
[76*512]=[65*512+1];		// for idle and init
[PROCESS_TABLE + 1]=0;				// PID	for idle
[PROCESS_TABLE + 17]=1;				// PID for user process
[PROCESS_TABLE + 4]=CREATED;		// STATE for idle
[PROCESS_TABLE + 20]=RUNNING;		// STATE for user process
[PROCESS_TABLE + 11]=82;			// User area page number for idle
[PROCESS_TABLE + 27]=80;			// UAPN for user process
[PROCESS_TABLE + 13]=8*512;			// (logical) Users Stack Pointer (UPTR)
[PROCESS_TABLE + 29]=8*512;			
[PROCESS_TABLE + 12]=0;				// (physical) Kernel Stack Pointer(KPTR)
[PROCESS_TABLE + 28]=0;
[PROCESS_TABLE + 14]=PAGE_TABLE_BASE;			// PTBR to Page_table_base
[PROCESS_TABLE + 15]=10;						// PTLR = 10
[PROCESS_TABLE + 30]=PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 31]=10;		
[SYSTEM_STATUS_TABLE + 1]=1;		// CURRENT PID
SP=8*512;				// Starting address of stack
ireturn;
